计算机与操作系统概论/介绍
  计算机硬件系统
    存储程序计算机（冯诺依曼体系）
    总线
      内部总线（CPU内部）、系统总线（连接CPU、存储器、外设）、通信总线（计算机系统之间通信、网络）
    CPU
      ALU、Register、CTL
    存储器（层次）
      寄存器->L1/L2/L3 cache->SSD->Disk->Web、分布式文件系统
    外设
      分类：输入、输出、存储、通信；字节、字符、块
      控制方式：轮询、中断（CPU控制读写数据）、DMA（DMA控制读写数据）

  计算机软件系统
    系统软件（OS，实用程序，语言处理程序，DBMS）
    支撑软件（开发工具）
    应用软件
    
    计算机硬件系统		机器语言
    操作系统（硬件资源管理）	机器语言+广义指令
    操作系统之文件系统	机器语言+系统调用
    数据库管理系统		数据库语言
    语言处理系统		高级语言
    支撑软件		。。。

  计算机操作技术的发展
    1 原始开关/控制台
    2 装入程序，将机器语言程序装入内存（卡带/纸带）
    3 引入汇编语言，符号化机器语言
    4 批处理。引入作业控制语言，用户可编写作业说明书，成批输入作业
    5 多道程序同时运行，实现程序的切换

  计算机操作系统
    操作系统的组成：
      进程调度、进程通信、内存管理、设备管理、文件管理、网络通信、作业控制
    几类操作系统：
      多道批处理（脱机控制方式）、分时（交互控制方式）、实时
    资源管理的角度：
      资源：处理器、内存、设备、信息资源管理（文件等）、信号量资源（进程间通信）
      屏蔽资源底层的使用细节：使用驱动程序，屏蔽底层细节，向其他部分提供一个抽象的、通用的接口
      资源的共享与分配：
        资源共享方式：独占、并发
        资源分配策略：静态、动态、抢占
    控制程序执行的角度：
      多道程序设计，并发使用CPU
      实现：进程
        如何使用资源：调用操作系统提供的服务例程（陷入操作系统）
        如何复用CPU：进程调度
        如何使CPU与I/O设备充分并行：设备控制器与“通道（专门的I/O处理器）”
        如何让正在运行的程序让出CPU：中断
    控制计算机的角度：
      OS提供：操作接口（系统/命令程序）、作业级接口
    人机交互的角度：
      热点！！！
    程序接口的角度：
      程序接口：系统调用――访问操作系统的接口，完成某种特定功能的过程
      系统调用的实现：
        机制：陷入处理机制；陷入指令（引起处理器终端的制定）；对系统调用编号，约定好存放参数的寄存器
        要点：编写系统调用处理程序、系统调用入口地址表、开辟现场保护区（以保存发生系统调用时的处理器现场）
    系统结构的角度：
      模块化、层次化、虚拟化
      OS构件：内核、进程、现成、管程
      单内核、微内核、混合内核、外内核



设备管理
       I/O设备分类：输入/出；人机交互/存储/机机通信；字符/块/网络
       设备管理目标：
              解决设备和CPU速度的不匹配，充分并行
              屏蔽设备的物理细节和操作过程，配置驱动程序，提供统一界面
                    裸设备
                    设备文件
       设备管理的功能：
              设备中断处理
              缓冲区管理
              设备的分配和去配
              设备驱动调度
              虚拟设备的实现
       设备管理的实现层次：
              I/O硬件：I/O设备及其接口线路、控制部件、通道
              I/O软件：系统I/O软件、用户空间I/O软件

I/O控制方式
       系统交互的对象：设备控制器（设备适配器、I/O控制器、。。。）
       设备控制器集成在主板上，不在设备里！
       设备控制器的功能：
              接受和识别CPU或通道发来的命令
              实现数据交换
              发现和记录设备及自身的状态信息，供CPU处理时使用
              当连接多台设备时，识别设备地址
       轮询方式：
              处理器轮询时不能做其他事情
       中断方式：
              流程：CPU向I/O控制器发送I/O命令，控制器去I/O；控制器I/O完后中断CPU；CPU进入中断处理程序，执行内存数据交换
       DMA（直接存储器访问）方式：
              流程：CPU向控制器DMA模块发出I/O命令；CPU不做内存数据交换，由DMA一并完成；DMA传送完数据后再中断CPU；CPU中断，读DMA状态
              DMA和CPU要竞争内存总线，但影响不大（流水线CPU执行时总有不要交换数据的时候）
       通道方式：
              前三种方式物理并行，CPU与通道高速并行
              I/O通道（通道控制器、I/O处理器）：是一个简单的处理器，用于完成逻辑上独立的I/O任务
              四级连接：处理器、通道、控制器、设备
              通道可控制多台同类或不同类的设备
              流程：
                     CPU遇到I/O任务，组织通道程序，置通道程序地址字CAW，启动指定通道；CPU执行其他任务
                     通道从CAW获得通道程序，控制I/O设备进行操作
                     I/O通道完成I/O操作后发出中断；CPU处理中断，从通道程序状态字CSW获得通道执行情况，处理I/O操作

总线与I/O：
       总线解决I/O速度不匹配问题
       单总线结构模型：一条总线，连接CPU、主存与所有I/O设备
       三级总线模型：CPU内部总线（与cache）、CPU-主存总线、外设扩展总线
       南北桥模型：CPU内部总线、主存总线、PCI总线（北桥、高速外设）、E（ISA）总线（南桥、慢速外设）
       基于通道的服务器总线模型：有层级，有通道管控制器

I/O软件：
       设计目标：高效率、通用性
       设计思路：软件组织成层次；低层屏蔽硬件细节、高层提供友善界面
       问题：设备无关性、出错处理（低层错误不给高层）、同步/异步传输、缓冲技术
       层次结构：
              用户空间的软件（系统调用、格式化）
              独立于设备的软件（逻辑功能：设备的命名、保护、阻塞 、缓冲、分配、跟踪）
              设备驱动程序（设备初始化、启动I/O操作、检查I/O状态，对应某类设备的具体细节，可以分层设计）
              中断处理程序（处理中断、报告错误、中断时唤醒驱动程序，响应/原则处理）
              硬件

I/O缓冲区：
       在内存中开辟的存储区，专门用于临时存放I/O操作的数据
       why：
             CPU与设备速度不匹配
             逻辑/物理记录大小不一致
             并行性
             减少中断
             放宽CPU对中断响应时间的要求

设备独立性：
       用户不指定物理设备，而是指定逻辑设备，使用户进程和物理设备分离开来
       通过其它途径建立逻辑设备和物理设备之间的映射
       系统需提供逻辑设备名和物理设备名的对应表
       易于应对各种I/O设备故障，提高系统可靠性、设备分配的灵活性








